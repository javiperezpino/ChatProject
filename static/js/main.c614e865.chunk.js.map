{"version":3,"sources":["Service/CourseDataService.js","Component/ListCoursesComponent.jsx","Component/CourseComponent.jsx","Component/InstructorApp.jsx","App.js","serviceWorker.js","index.js"],"names":["INSTRUCTOR_API_URL","name","axios","get","id","delete","course","put","post","ListCoursesComponent","props","state","courses","message","refreshCourses","bind","deleteCourseClicked","updateCourseClicked","addCourseClicked","className","this","map","key","username","description","onClick","CourseDataService","retrieveAllCourses","then","response","console","log","setState","data","deleteCourse","history","push","Component","CourseComponent","validate","onSubmit","match","params","retrieveCourse","values","targetDate","createCourse","updateCourse","errors","length","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","type","disabled","InstructorApp","basename","path","exact","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c614e865.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst INSTRUCTOR = 'in28minutes'\r\nconst COURSE_API_URL = 'http://javidatabase.ddns.net:8080/jap-keep-0.0.1-SNAPSHOT/'\r\nconst INSTRUCTOR_API_URL = `${COURSE_API_URL}/instructors/${INSTRUCTOR}`\r\n\r\nclass CourseDataService {\r\n\r\n    retrieveAllCourses(name) {\r\n        return axios.get(`${INSTRUCTOR_API_URL}/courses`);\r\n    }\r\n    \r\n    deleteCourse(name, id) {\r\n        //console.log('executed service')\r\n        return axios.delete(`${INSTRUCTOR_API_URL}/courses/${id}`);\r\n    }\r\n\r\n    retrieveCourse(name, id) {\r\n        return axios.get(`${INSTRUCTOR_API_URL}/courses/${id}`);\r\n    }\r\n\r\n    updateCourse(name, id, course) {\r\n        return axios.put(`${INSTRUCTOR_API_URL}/courses/${id}`, course);\r\n    }\r\n  \r\n    createCourse(name, course) {\r\n        return axios.post(`${INSTRUCTOR_API_URL}/courses/`, course);\r\n    }\r\n}\r\n\r\nexport default new CourseDataService()\r\n","import React, { Component } from 'react';\r\nimport CourseDataService from '../Service/CourseDataService';\r\n\r\nconst INSTRUCTOR = 'in28minutes'\r\nclass ListCoursesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            courses: [],\r\n            message: null\r\n        }\r\n        this.refreshCourses = this.refreshCourses.bind(this)\r\n        this.deleteCourseClicked = this.deleteCourseClicked.bind(this)\r\n        this.updateCourseClicked = this.updateCourseClicked.bind(this)\r\n        this.addCourseClicked = this.addCourseClicked.bind(this)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h3>All Courses</h3>\r\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>Username</th>\r\n                                <th>Description</th>\r\n                                <th>Update</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.courses.map(\r\n                                    course =>\r\n                                        <tr key={course.id}>\r\n                                            <td>{course.id}</td>\r\n                                            <td>{course.username}</td>\r\n                                            <td>{course.description}</td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateCourseClicked(course.id)}>Update</button></td>\r\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteCourseClicked(course.id)}>Delete</button></td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <button className=\"btn btn-success\" onClick={this.addCourseClicked}>Add</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshCourses();\r\n    }\r\n\r\n    refreshCourses() {\r\n        CourseDataService.retrieveAllCourses(INSTRUCTOR)//HARDCODED\r\n            .then(\r\n                response => {\r\n                    console.log(response);\r\n                    this.setState({ courses: response.data })\r\n                }\r\n            )\r\n    }\r\n    deleteCourseClicked(id) {\r\n        CourseDataService.deleteCourse(INSTRUCTOR, id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete of course ${id} Successful` })\r\n                    this.refreshCourses()\r\n                }\r\n            )\r\n    \r\n    }\r\n    updateCourseClicked(id) {\r\n        console.log('update ' + id)\r\n        this.props.history.push(`/courses/${id}`)\r\n    }\r\n    addCourseClicked() {\r\n        this.props.history.push(`/courses/-1`)\r\n    }\r\n}\r\n\r\nexport default ListCoursesComponent","import React, { Component } from 'react'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CourseDataService from '../Service/CourseDataService';\r\n\r\nconst INSTRUCTOR = 'in28minutes'\r\n\r\nclass CourseComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.validate = this.validate.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            description: ''\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(this.state.id)\r\n\r\n\r\n        // eslint-disable-next-line\r\n        if (this.state.id == -1) {\r\n            return\r\n        }\r\n\r\n        CourseDataService.retrieveCourse(INSTRUCTOR, this.state.id)\r\n            .then(response => this.setState({\r\n                description: response.data.description\r\n                \r\n            }))\r\n\r\n            \r\n    }\r\n    onSubmit(values) {\r\n        let username = INSTRUCTOR\r\n\r\n        let course = {\r\n            id: this.state.id,\r\n            username: INSTRUCTOR,\r\n            description: values.description,\r\n            targetDate: values.targetDate\r\n        }\r\n\r\n        if (this.state.id == -1) {\r\n            CourseDataService.createCourse(username, course)\r\n                .then(() => this.props.history.push('/courses'))\r\n        } else {\r\n            CourseDataService.updateCourse(username, this.state.id, course)\r\n                .then(() => this.props.history.push('/courses'))\r\n        }\r\n\r\n        console.log(values);\r\n    }\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.description) {\r\n            errors.description = 'Enter a Description'\r\n        } else if (values.description.length < 5) {\r\n            errors.description = 'Enter atleast 5 Characters in Description'\r\n        }\r\n    \r\n        return errors\r\n    }\r\n\r\n    render() {\r\n        \r\n        let { description, id } = this.state\r\n        \r\n\r\n\r\n        return (\r\n            <div>\r\n                <h3>Course</h3>\r\n                <div className=\"container\">\r\n                <Formik\r\n                    initialValues={{description: description, id: id}}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                    onSubmit={this.onSubmit}>\r\n                    {(props) => (\r\n                        <Form>\r\n                            <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning\" />\r\n                            <fieldset className=\"form-group\">\r\n                                <label>Id</label>\r\n                                <Field className=\"form-control\" type=\"text\" name=\"id\" disabled/>\r\n                            </fieldset>\r\n                            <fieldset className=\"form-group\">\r\n                                <label>Description</label>\r\n                                <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                            </fieldset>\r\n                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                        </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n                \r\n                </div>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n    \r\n}\r\n\r\nexport default CourseComponent","import React, { Component } from 'react';\r\nimport ListCoursesComponent from './ListCoursesComponent';\r\nimport CourseComponent from './CourseComponent';\r\n\r\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\nclass InstructorApp extends Component {\r\n    render() {\r\n        return (\r\n                <Router basename =\"/frontend-jap-keep\">\r\n                <>\r\n                    <h1>Instructor Application</h1>\r\n                    <Switch>\r\n                        \r\n                        <Route path=\"/\" exact component={ListCoursesComponent} />\r\n                        <Route path=\"/courses\" exact component={ListCoursesComponent} />\r\n                        <Route path=\"/courses/:id\" component={CourseComponent} />\r\n                    </Switch>\r\n                </>\r\n                </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InstructorApp","import React, { Component } from 'react';\nimport './App.css';\nimport InstructorApp from './Component/InstructorApp';\nimport ListCoursesComponent from './Component/ListCoursesComponent';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <InstructorApp />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}